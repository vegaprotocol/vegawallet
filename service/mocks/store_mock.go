// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/go-wallet/service (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	service "code.vegaprotocol.io/go-wallet/service"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ConfigExists mocks base method
func (m *MockStore) ConfigExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigExists indicates an expected call of ConfigExists
func (mr *MockStoreMockRecorder) ConfigExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigExists", reflect.TypeOf((*MockStore)(nil).ConfigExists))
}

// RSAKeysExists mocks base method
func (m *MockStore) RSAKeysExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSAKeysExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RSAKeysExists indicates an expected call of RSAKeysExists
func (mr *MockStoreMockRecorder) RSAKeysExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSAKeysExists", reflect.TypeOf((*MockStore)(nil).RSAKeysExists))
}

// SaveConfig mocks base method
func (m *MockStore) SaveConfig(arg0 *service.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig
func (mr *MockStoreMockRecorder) SaveConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockStore)(nil).SaveConfig), arg0)
}

// SaveRSAKeys mocks base method
func (m *MockStore) SaveRSAKeys(arg0 *service.RSAKeys) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRSAKeys", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRSAKeys indicates an expected call of SaveRSAKeys
func (mr *MockStoreMockRecorder) SaveRSAKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRSAKeys", reflect.TypeOf((*MockStore)(nil).SaveRSAKeys), arg0)
}
