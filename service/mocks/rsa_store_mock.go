// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vegawallet/service (interfaces: RSAStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	service "code.vegaprotocol.io/vegawallet/service"
	gomock "github.com/golang/mock/gomock"
)

// MockRSAStore is a mock of RSAStore interface.
type MockRSAStore struct {
	ctrl     *gomock.Controller
	recorder *MockRSAStoreMockRecorder
}

// MockRSAStoreMockRecorder is the mock recorder for MockRSAStore.
type MockRSAStoreMockRecorder struct {
	mock *MockRSAStore
}

// NewMockRSAStore creates a new mock instance.
func NewMockRSAStore(ctrl *gomock.Controller) *MockRSAStore {
	mock := &MockRSAStore{ctrl: ctrl}
	mock.recorder = &MockRSAStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRSAStore) EXPECT() *MockRSAStoreMockRecorder {
	return m.recorder
}

// GetRsaKeys mocks base method.
func (m *MockRSAStore) GetRsaKeys() (*service.RSAKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRsaKeys")
	ret0, _ := ret[0].(*service.RSAKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRsaKeys indicates an expected call of GetRsaKeys.
func (mr *MockRSAStoreMockRecorder) GetRsaKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRsaKeys", reflect.TypeOf((*MockRSAStore)(nil).GetRsaKeys))
}
