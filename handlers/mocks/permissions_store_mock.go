// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vegawallet/handlers (interfaces: PermissionsStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	permissions "code.vegaprotocol.io/vegawallet/permissions"
	gomock "github.com/golang/mock/gomock"
)

// MockPermissionsStore is a mock of PermissionsStore interface.
type MockPermissionsStore struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionsStoreMockRecorder
}

// MockPermissionsStoreMockRecorder is the mock recorder for MockPermissionsStore.
type MockPermissionsStoreMockRecorder struct {
	mock *MockPermissionsStore
}

// NewMockPermissionsStore creates a new mock instance.
func NewMockPermissionsStore(ctrl *gomock.Controller) *MockPermissionsStore {
	mock := &MockPermissionsStore{ctrl: ctrl}
	mock.recorder = &MockPermissionsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionsStore) EXPECT() *MockPermissionsStoreMockRecorder {
	return m.recorder
}

// PermissionsForHostname mocks base method.
func (m *MockPermissionsStore) PermissionsForHostname(arg0 string) (permissions.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermissionsForHostname", arg0)
	ret0, _ := ret[0].(permissions.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PermissionsForHostname indicates an expected call of PermissionsForHostname.
func (mr *MockPermissionsStoreMockRecorder) PermissionsForHostname(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermissionsForHostname", reflect.TypeOf((*MockPermissionsStore)(nil).PermissionsForHostname), arg0)
}
